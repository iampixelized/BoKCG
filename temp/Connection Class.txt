java.sql
Interface Connection
•	All Superinterfaces:
AutoCloseable, Wrapper
________________________________________

public interface Connection
extends Wrapper, AutoCloseable
A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.
A Connection object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the getMetaDatamethod.
Note: When configuring a Connection, JDBC applications should use the appropriate Connection method such as setAutoCommit or setTransactionIsolation. Applications should not invoke SQL commands directly to change the connection's configuration when there is a JDBC method available. By default a Connection object is in auto-commit mode, which means that it automatically commits changes after executing each statement. If auto-commit mode has been disabled, the method commit must be called explicitly in order to commit changes; otherwise, database changes will not be saved.
A new Connection object created using the JDBC 2.1 core API has an initially empty type map associated with it. A user may enter a custom mapping for a UDT in this type map. When a UDT is retrieved from a data source with the methodResultSet.getObject, the getObject method will check the connection's type map to see if there is an entry for that UDT. If so, the getObject method will map the UDT to the class indicated. If there is no entry, the UDT will be mapped using the standard mapping.
A user may create a new type map, which is a java.util.Map object, make an entry in it, and pass it to the java.sql methods that can perform custom mapping. In this case, the method will use the given type map instead of the one associated with the connection.
For example, the following code fragment specifies that the SQL type ATHLETES will be mapped to the class Athletes in the Java programming language. The code fragment retrieves the type map for the Connection object con, inserts the entry into it, and then sets the type map with the new entry as the connection's type map.
      java.util.Map map = con.getTypeMap();
      map.put("mySchemaName.ATHLETES", Class.forName("Athletes"));
      con.setTypeMap(map);
 
See Also:
DriverManager.getConnection(java.lang.String, java.util.Properties), Statement, ResultSet, DatabaseMetaData
•	
•	Field Summary
Fields 
Modifier and Type	Field and Description
static int	TRANSACTION_NONE
A constant indicating that transactions are not supported.
static int	TRANSACTION_READ_COMMITTED
A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur.
static int	TRANSACTION_READ_UNCOMMITTED
A constant indicating that dirty reads, non-repeatable reads and phantom reads can occur.
static int	TRANSACTION_REPEATABLE_READ
A constant indicating that dirty reads and non-repeatable reads are prevented; phantom reads can occur.
static int	TRANSACTION_SERIALIZABLE
A constant indicating that dirty reads, non-repeatable reads and phantom reads are prevented.
•	Method Summary
Methods 
Modifier and Type	Method and Description
void	abort(Executor executor)
Terminates an open connection.
void	clearWarnings()
Clears all warnings reported for this Connection object.
void	close()
Releases this Connection object's database and JDBC resources immediately instead of waiting for them to be automatically released.
void	commit()
Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object.
Array
createArrayOf(String typeName, Object[] elements)
Factory method for creating Array objects.
Blob
createBlob()
Constructs an object that implements the Blob interface.
Clob
createClob()
Constructs an object that implements the Clob interface.
NClob
createNClob()
Constructs an object that implements the NClob interface.
SQLXML
createSQLXML()
Constructs an object that implements the SQLXML interface.
Statement
createStatement()
Creates a Statement object for sending SQL statements to the database.
Statement
createStatement(int resultSetType, int resultSetConcurrency)
Creates a Statement object that will generate ResultSet objects with the given type and concurrency.
Statement
createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability.
Struct
createStruct(String typeName, Object[] attributes)
Factory method for creating Struct objects.
boolean	getAutoCommit()
Retrieves the current auto-commit mode for this Connection object.
String
getCatalog()
Retrieves this Connection object's current catalog name.
Properties
getClientInfo()
Returns a list containing the name and current value of each client info property supported by the driver.
String
getClientInfo(String name)
Returns the value of the client info property specified by name.
int	getHoldability()
Retrieves the current holdability of ResultSet objects created using this Connection object.
DatabaseMetaData
getMetaData()
Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection.
int	getNetworkTimeout()
Retrieves the number of milliseconds the driver will wait for a database request to complete.
String
getSchema()
Retrieves this Connection object's current schema name.
int	getTransactionIsolation()
Retrieves this Connection object's current transaction isolation level.
Map<String,Class<?>>
getTypeMap()
Retrieves the Map object associated with this Connection object.
SQLWarning
getWarnings()
Retrieves the first warning reported by calls on this Connection object.
boolean	isClosed()
Retrieves whether this Connection object has been closed.
boolean	isReadOnly()
Retrieves whether this Connection object is in read-only mode.
boolean	isValid(int timeout)
Returns true if the connection has not been closed and is still valid.
String
nativeSQL(String sql)
Converts the given SQL statement into the system's native SQL grammar.
CallableStatement
prepareCall(String sql)
Creates a CallableStatement object for calling database stored procedures.
CallableStatement
prepareCall(String sql, int resultSetType, int resultSetConcurrency)
Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency.
CallableStatement
prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency.
PreparedStatement
prepareStatement(String sql)
Creates a PreparedStatement object for sending parameterized SQL statements to the database.
PreparedStatement
prepareStatement(String sql, int autoGeneratedKeys)
Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys.
PreparedStatement
prepareStatement(String sql, int[] columnIndexes)
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array.
PreparedStatement
prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency.
PreparedStatement
prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability.
PreparedStatement
prepareStatement(String sql, String[] columnNames)
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array.
void	releaseSavepoint(Savepoint savepoint)
Removes the specified Savepoint and subsequent Savepoint objects from the current transaction.
void	rollback()
Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object.
void	rollback(Savepoint savepoint)
Undoes all changes made after the given Savepoint object was set.
void	setAutoCommit(boolean autoCommit)
Sets this connection's auto-commit mode to the given state.
void	setCatalog(String catalog)
Sets the given catalog name in order to select a subspace of this Connection object's database in which to work.
void	setClientInfo(Properties properties)
Sets the value of the connection's client info properties.
void	setClientInfo(String name, String value)
Sets the value of the client info property specified by name to the value specified by value.
void	setHoldability(int holdability)
Changes the default holdability of ResultSet objects created using this Connection object to the given holdability.
void	setNetworkTimeout(Executor executor, int milliseconds)
Sets the maximum period a Connection or objects created from the Connection will wait for the database to reply to any one request.
void	setReadOnly(boolean readOnly)
Puts this connection in read-only mode as a hint to the driver to enable database optimizations.
Savepoint
setSavepoint()
Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it.
Savepoint
setSavepoint(String name)
Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it.
void	setSchema(String schema)
Sets the given schema name to access.
void	setTransactionIsolation(int level)
Attempts to change the transaction isolation level for this Connection object to the one given.
void	setTypeMap(Map<String,Class<?>> map)
Installs the given TypeMap object as the type map for this Connection object.
•	Methods inherited from interface java.sql.Wrapper
isWrapperFor, unwrap
•	
•	Field Detail
•	TRANSACTION_NONE
static final int TRANSACTION_NONE
A constant indicating that transactions are not supported.
See Also:
Constant Field Values
•	TRANSACTION_READ_UNCOMMITTED
static final int TRANSACTION_READ_UNCOMMITTED
A constant indicating that dirty reads, non-repeatable reads and phantom reads can occur. This level allows a row changed by one transaction to be read by another transaction before any changes in that row have been committed (a "dirty read"). If any of the changes are rolled back, the second transaction will have retrieved an invalid row.
See Also:
Constant Field Values
•	TRANSACTION_READ_COMMITTED
static final int TRANSACTION_READ_COMMITTED
A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur. This level only prohibits a transaction from reading a row with uncommitted changes in it.
See Also:
Constant Field Values
•	TRANSACTION_REPEATABLE_READ
static final int TRANSACTION_REPEATABLE_READ
A constant indicating that dirty reads and non-repeatable reads are prevented; phantom reads can occur. This level prohibits a transaction from reading a row with uncommitted changes in it, and it also prohibits the situation where one transaction reads a row, a second transaction alters the row, and the first transaction rereads the row, getting different values the second time (a "non-repeatable read").
See Also:
Constant Field Values
•	TRANSACTION_SERIALIZABLE
static final int TRANSACTION_SERIALIZABLE
A constant indicating that dirty reads, non-repeatable reads and phantom reads are prevented. This level includes the prohibitions in TRANSACTION_REPEATABLE_READ and further prohibits the situation where one transaction reads all rows that satisfy a WHERE condition, a second transaction inserts a row that satisfies that WHERE condition, and the first transaction rereads for the same condition, retrieving the additional "phantom" row in the second read.
See Also:
Constant Field Values
•	Method Detail
•	createStatement
•	Statement createStatement()
                          throws SQLException
Creates a Statement object for sending SQL statements to the database. SQL statements without parameters are normally executed using Statement objects. If the same SQL statement is executed many times, it may be more efficient to use a PreparedStatement object.
Result sets created using the returned Statement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by callinggetHoldability().
Returns:
a new default Statement object
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
•	prepareStatement
•	PreparedStatement prepareStatement(String sql)
                                   throws SQLException
Creates a PreparedStatement object for sending parameterized SQL statements to the database.
A SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.
Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLException objects.
Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - an SQL statement that may contain one or more '?' IN parameter placeholders
Returns:
a new default PreparedStatement object containing the pre-compiled SQL statement
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
•	prepareCall
•	CallableStatement prepareCall(String sql)
                              throws SQLException
Creates a CallableStatement object for calling database stored procedures. The CallableStatement object provides methods for setting up its IN and OUT parameters, and methods for executing the call to a stored procedure.
Note: This method is optimized for handling stored procedure call statements. Some drivers may send the call statement to the database when the method prepareCall is done; others may wait until the CallableStatement object is executed. This has no direct effect on users; however, it does affect which method throws certain SQLExceptions.
Result sets created using the returned CallableStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - an SQL statement that may contain one or more '?' parameter placeholders. Typically this statement is specified using JDBC call escape syntax.
Returns:
a new default CallableStatement object containing the pre-compiled SQL statement
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
•	nativeSQL
•	String nativeSQL(String sql)
                 throws SQLException
Converts the given SQL statement into the system's native SQL grammar. A driver may convert the JDBC SQL grammar into its system's native SQL grammar prior to sending it. This method returns the native form of the statement that the driver would have sent.
Parameters:
sql - an SQL statement that may contain one or more '?' parameter placeholders
Returns:
the native form of this statement
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
•	setAutoCommit
•	void setAutoCommit(boolean autoCommit)
                   throws SQLException
Sets this connection's auto-commit mode to the given state. If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either the method commit or the method rollback. By default, new connections are in auto-commit mode.
The commit occurs when the statement completes. The time when the statement completes depends on the type of SQL Statement:
•	For DML statements, such as Insert, Update or Delete, and DDL statements, the statement is complete as soon as it has finished executing.
•	For Select statements, the statement is complete when the associated result set is closed.
•	For CallableStatement objects or for statements that return multiple results, the statement is complete when all of the associated result sets have been closed, and all update counts and output parameters have been retrieved.
NOTE: If this method is called during a transaction and the auto-commit mode is changed, the transaction is committed. If setAutoCommit is called and the auto-commit mode is not changed, the call is a no-op.
Parameters:
autoCommit - true to enable auto-commit mode; false to disable it
Throws:
SQLException - if a database access error occurs, setAutoCommit(true) is called while participating in a distributed transaction, or this method is called on a closed connection
See Also:
getAutoCommit()
•	getAutoCommit
•	boolean getAutoCommit()
                      throws SQLException
Retrieves the current auto-commit mode for this Connection object.
Returns:
the current state of this Connection object's auto-commit mode
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
See Also:
setAutoCommit(boolean)
•	commit
•	void commit()
            throws SQLException
Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.
Throws:
SQLException - if a database access error occurs, this method is called while participating in a distributed transaction, if this method is called on a closed conection or this Connection object is in auto-commit mode
See Also:
setAutoCommit(boolean)
•	rollback
•	void rollback()
              throws SQLException
Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.
Throws:
SQLException - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this Connection object is in auto-commit mode
See Also:
setAutoCommit(boolean)
•	close
•	void close()
           throws SQLException
Releases this Connection object's database and JDBC resources immediately instead of waiting for them to be automatically released.
Calling the method close on a Connection object that is already closed is a no-op.
It is strongly recommended that an application explicitly commits or rolls back an active transaction prior to calling the close method. If the close method is called and there is an active transaction, the results are implementation-defined.
Specified by:
close in interface AutoCloseable
Throws:
SQLException - SQLException if a database access error occurs
•	isClosed
•	boolean isClosed()
                 throws SQLException
Retrieves whether this Connection object has been closed. A connection is closed if the method close has been called on it or if certain fatal errors have occurred. This method is guaranteed to return true only when it is called after the method Connection.close has been called.
This method generally cannot be called to determine whether a connection to a database is valid or invalid. A typical client can determine that a connection is invalid by catching any exceptions that might be thrown when an operation is attempted.
Returns:
true if this Connection object is closed; false if it is still open
Throws:
SQLException - if a database access error occurs
•	getMetaData
•	DatabaseMetaData getMetaData()
                             throws SQLException
Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection. The metadata includes information about the database's tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on.
Returns:
a DatabaseMetaData object for this Connection object
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
•	setReadOnly
•	void setReadOnly(boolean readOnly)
                 throws SQLException
Puts this connection in read-only mode as a hint to the driver to enable database optimizations.
Note: This method cannot be called during a transaction.
Parameters:
readOnly - true enables read-only mode; false disables it
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or this method is called during a transaction
•	isReadOnly
•	boolean isReadOnly()
                   throws SQLException
Retrieves whether this Connection object is in read-only mode.
Returns:
true if this Connection object is read-only; false otherwise
Throws:
SQLException - SQLException if a database access error occurs or this method is called on a closed connection
•	setCatalog
•	void setCatalog(String catalog)
                throws SQLException
Sets the given catalog name in order to select a subspace of this Connection object's database in which to work.
If the driver does not support catalogs, it will silently ignore this request.
Calling setCatalog has no effect on previously created or prepared Statement objects. It is implementation defined whether a DBMS prepare operation takes place immediately when the Connection method prepareStatement orprepareCall is invoked. For maximum portability, setCatalog should be called before a Statement is created or prepared.
Parameters:
catalog - the name of a catalog (subspace in this Connection object's database) in which to work
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
See Also:
getCatalog()
•	getCatalog
•	String getCatalog()
                  throws SQLException
Retrieves this Connection object's current catalog name.
Returns:
the current catalog name or null if there is none
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
See Also:
setCatalog(java.lang.String)
•	setTransactionIsolation
•	void setTransactionIsolation(int level)
                             throws SQLException
Attempts to change the transaction isolation level for this Connection object to the one given. The constants defined in the interface Connection are the possible transaction isolation levels.
Note: If this method is called during a transaction, the result is implementation-defined.
Parameters:
level - one of the following Connection constants: Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, orConnection.TRANSACTION_SERIALIZABLE. (Note that Connection.TRANSACTION_NONE cannot be used because it specifies that transactions are not supported.)
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameter is not one of the Connection constants
See Also:
DatabaseMetaData.supportsTransactionIsolationLevel(int), getTransactionIsolation()
•	getTransactionIsolation
•	int getTransactionIsolation()
                            throws SQLException
Retrieves this Connection object's current transaction isolation level.
Returns:
the current transaction isolation level, which will be one of the following constants: Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED,Connection.TRANSACTION_REPEATABLE_READ, Connection.TRANSACTION_SERIALIZABLE, or Connection.TRANSACTION_NONE.
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
See Also:
setTransactionIsolation(int)
•	getWarnings
•	SQLWarning getWarnings()
                       throws SQLException
Retrieves the first warning reported by calls on this Connection object. If there is more than one warning, subsequent warnings will be chained to the first one and can be retrieved by calling the methodSQLWarning.getNextWarning on the warning that was retrieved previously.
This method may not be called on a closed connection; doing so will cause an SQLException to be thrown.
Note: Subsequent warnings will be chained to this SQLWarning.
Returns:
the first SQLWarning object or null if there are none
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
See Also:
SQLWarning
•	clearWarnings
•	void clearWarnings()
                   throws SQLException
Clears all warnings reported for this Connection object. After a call to this method, the method getWarnings returns null until a new warning is reported for this Connection object.
Throws:
SQLException - SQLException if a database access error occurs or this method is called on a closed connection
•	createStatement
•	Statement createStatement(int resultSetType,
•	                        int resultSetConcurrency)
                          throws SQLException
Creates a Statement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the createStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
resultSetType - a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE
resultSetConcurrency - a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
Returns:
a new Statement object that will generate ResultSet objects with the given type and concurrency
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency
SQLFeatureNotSupportedException - if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency.
Since:
1.2
•	prepareStatement
•	PreparedStatement prepareStatement(String sql,
•	                                 int resultSetType,
•	                                 int resultSetConcurrency)
                                   throws SQLException
Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters
resultSetType - a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE
resultSetConcurrency - a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
Returns:
a new PreparedStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given type and concurrency
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency
SQLFeatureNotSupportedException - if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency.
Since:
1.2
•	prepareCall
•	CallableStatement prepareCall(String sql,
•	                            int resultSetType,
•	                            int resultSetConcurrency)
                              throws SQLException
Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters
resultSetType - a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE
resultSetConcurrency - a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
Returns:
a new CallableStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given type and concurrency
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency
SQLFeatureNotSupportedException - if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency.
Since:
1.2
•	getTypeMap
•	Map<String,Class<?>> getTypeMap()
                                throws SQLException
Retrieves the Map object associated with this Connection object. Unless the application has added an entry, the type map returned will be empty.
You must invoke setTypeMap after making changes to the Map object returned from getTypeMap as a JDBC driver may create an internal copy of the Map object passed to setTypeMap:
      Map<String,Class<?>> myMap = con.getTypeMap();
      myMap.put("mySchemaName.ATHLETES", Athletes.class);
      con.setTypeMap(myMap);
 
Returns:
the java.util.Map object associated with this Connection object
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.2
See Also:
setTypeMap(java.util.Map<java.lang.String, java.lang.Class<?>>)
•	setTypeMap
•	void setTypeMap(Map<String,Class<?>> map)
                throws SQLException
Installs the given TypeMap object as the type map for this Connection object. The type map will be used for the custom mapping of SQL structured types and distinct types.
You must set the the values for the TypeMap prior to callng setMap as a JDBC driver may create an internal copy of the TypeMap:
      Map myMap<String,Class<?>> = new HashMap<String,Class<?>>();
      myMap.put("mySchemaName.ATHLETES", Athletes.class);
      con.setTypeMap(myMap);
 
Parameters:
map - the java.util.Map object to install as the replacement for this Connection object's default type map
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameter is not a java.util.Map object
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.2
See Also:
getTypeMap()
•	setHoldability
•	void setHoldability(int holdability)
                    throws SQLException
Changes the default holdability of ResultSet objects created using this Connection object to the given holdability. The default holdability of ResultSet objects can be be determined by invokingDatabaseMetaData.getResultSetHoldability().
Parameters:
holdability - a ResultSet holdability constant; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
Throws:
SQLException - if a database access occurs, this method is called on a closed connection, or the given parameter is not a ResultSet constant indicating holdability
SQLFeatureNotSupportedException - if the given holdability is not supported
Since:
1.4
See Also:
getHoldability(), DatabaseMetaData.getResultSetHoldability(), ResultSet
•	getHoldability
•	int getHoldability()
                   throws SQLException
Retrieves the current holdability of ResultSet objects created using this Connection object.
Returns:
the holdability, one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
Since:
1.4
See Also:
setHoldability(int), DatabaseMetaData.getResultSetHoldability(), ResultSet
•	setSavepoint
•	Savepoint setSavepoint()
                       throws SQLException
Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it.
if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created savepoint.
Returns:
the new Savepoint object
Throws:
SQLException - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this Connection object is currently in auto-commit mode
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.4
See Also:
Savepoint
•	setSavepoint
•	Savepoint setSavepoint(String name)
                       throws SQLException
Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it.
if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created savepoint.
Parameters:
name - a String containing the name of the savepoint
Returns:
the new Savepoint object
Throws:
SQLException - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this Connection object is currently in auto-commit mode
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.4
See Also:
Savepoint
•	rollback
•	void rollback(Savepoint savepoint)
              throws SQLException
Undoes all changes made after the given Savepoint object was set.
This method should be used only when auto-commit has been disabled.
Parameters:
savepoint - the Savepoint object to roll back to
Throws:
SQLException - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection, the Savepoint object is no longer valid, or this Connectionobject is currently in auto-commit mode
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.4
See Also:
Savepoint, rollback()
•	releaseSavepoint
•	void releaseSavepoint(Savepoint savepoint)
                      throws SQLException
Removes the specified Savepoint and subsequent Savepoint objects from the current transaction. Any reference to the savepoint after it have been removed will cause an SQLException to be thrown.
Parameters:
savepoint - the Savepoint object to be removed
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given Savepoint object is not a valid savepoint in the current transaction
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.4
•	createStatement
•	Statement createStatement(int resultSetType,
•	                        int resultSetConcurrency,
•	                        int resultSetHoldability)
                          throws SQLException
Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the createStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.
Parameters:
resultSetType - one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE
resultSetConcurrency - one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
resultSetHoldability - one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
Returns:
a new Statement object that will generate ResultSet objects with the given type, concurrency, and holdability
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability
SQLFeatureNotSupportedException - if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency.
Since:
1.4
See Also:
ResultSet
•	prepareStatement
•	PreparedStatement prepareStatement(String sql,
•	                                 int resultSetType,
•	                                 int resultSetConcurrency,
•	                                 int resultSetHoldability)
                                   throws SQLException
Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability.
This method is the same as the prepareStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.
Parameters:
sql - a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters
resultSetType - one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE
resultSetConcurrency - one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
resultSetHoldability - one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
Returns:
a new PreparedStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given type, concurrency, and holdability
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability
SQLFeatureNotSupportedException - if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency.
Since:
1.4
See Also:
ResultSet
•	prepareCall
•	CallableStatement prepareCall(String sql,
•	                            int resultSetType,
•	                            int resultSetConcurrency,
•	                            int resultSetHoldability)
                              throws SQLException
Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type, result set concurrency type and holdability to be overridden.
Parameters:
sql - a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters
resultSetType - one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE
resultSetConcurrency - one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
resultSetHoldability - one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
Returns:
a new CallableStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given type, concurrency, and holdability
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability
SQLFeatureNotSupportedException - if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency.
Since:
1.4
See Also:
ResultSet
•	prepareStatement
•	PreparedStatement prepareStatement(String sql,
•	                                 int autoGeneratedKeys)
                                   throws SQLException
Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys. The given constant tells the driver whether it should make auto-generated keys available for retrieval. This parameter is ignored if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific).
Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions.
Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - an SQL statement that may contain one or more '?' IN parameter placeholders
autoGeneratedKeys - a flag indicating whether auto-generated keys should be returned; one of Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS
Returns:
a new PreparedStatement object, containing the pre-compiled SQL statement, that will have the capability of returning auto-generated keys
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection or the given parameter is not a Statement constant indicating whether auto-generated keys should be returned
SQLFeatureNotSupportedException - if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS
Since:
1.4
•	prepareStatement
•	PreparedStatement prepareStatement(String sql,
•	                                 int[] columnIndexes)
                                   throws SQLException
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific).
An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.
Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions.
Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - an SQL statement that may contain one or more '?' IN parameter placeholders
columnIndexes - an array of column indexes indicating the columns that should be returned from the inserted row or rows
Returns:
a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column indexes
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.4
•	prepareStatement
•	PreparedStatement prepareStatement(String sql,
•	                                 String[] columnNames)
                                   throws SQLException
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the names of the columns in the target table that contain the auto-generated keys that should be returned. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific).
An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.
Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions.
Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().
Parameters:
sql - an SQL statement that may contain one or more '?' IN parameter placeholders
columnNames - an array of column names indicating the columns that should be returned from the inserted row or rows
Returns:
a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column names
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.4
•	createClob
•	Clob createClob()
                throws SQLException
Constructs an object that implements the Clob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the Clob interface may be used to add data to theClob.
Returns:
An object that implements the Clob interface
Throws:
SQLException - if an object that implements the Clob interface can not be constructed, this method is called on a closed connection or a database access error occurs.
SQLFeatureNotSupportedException - if the JDBC driver does not support this data type
Since:
1.6
•	createBlob
•	Blob createBlob()
                throws SQLException
Constructs an object that implements the Blob interface. The object returned initially contains no data. The setBinaryStream and setBytes methods of the Blob interface may be used to add data to the Blob.
Returns:
An object that implements the Blob interface
Throws:
SQLException - if an object that implements the Blob interface can not be constructed, this method is called on a closed connection or a database access error occurs.
SQLFeatureNotSupportedException - if the JDBC driver does not support this data type
Since:
1.6
•	createNClob
•	NClob createNClob()
                  throws SQLException
Constructs an object that implements the NClob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the NClob interface may be used to add data to theNClob.
Returns:
An object that implements the NClob interface
Throws:
SQLException - if an object that implements the NClob interface can not be constructed, this method is called on a closed connection or a database access error occurs.
SQLFeatureNotSupportedException - if the JDBC driver does not support this data type
Since:
1.6
•	createSQLXML
•	SQLXML createSQLXML()
                    throws SQLException
Constructs an object that implements the SQLXML interface. The object returned initially contains no data. The createXmlStreamWriter object and setString method of the SQLXML interface may be used to add data to the SQLXMLobject.
Returns:
An object that implements the SQLXML interface
Throws:
SQLException - if an object that implements the SQLXML interface can not be constructed, this method is called on a closed connection or a database access error occurs.
SQLFeatureNotSupportedException - if the JDBC driver does not support this data type
Since:
1.6
•	isValid
•	boolean isValid(int timeout)
                throws SQLException
Returns true if the connection has not been closed and is still valid. The driver shall submit a query on the connection or use some other mechanism that positively verifies the connection is still valid when this method is called.
The query submitted by the driver to validate the connection shall be executed in the context of the current transaction.
Parameters:
timeout - - The time in seconds to wait for the database operation used to validate the connection to complete. If the timeout period expires before the operation completes, this method returns false. A value of 0 indicates a timeout is not applied to the database operation.
Returns:
true if the connection is valid, false otherwise
Throws:
SQLException - if the value supplied for timeout is less then 0
Since:
1.6
See Also:
DatabaseMetaData.getClientInfoProperties()
•	setClientInfo
•	void setClientInfo(String name,
•	                 String value)
                   throws SQLClientInfoException
Sets the value of the client info property specified by name to the value specified by value.
Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver and the maximum length that may be specified for each property.
The driver stores the value specified in a suitable location in the database. For example in a special register, session parameter, or system table column. For efficiency the driver may defer setting the value in the database until the next time a statement is executed or prepared. Other than storing the client information in the appropriate place in the database, these methods shall not alter the behavior of the connection in anyway. The values supplied to these methods are used for accounting, diagnostics and debugging purposes only.
The driver shall generate a warning if the client info name specified is not recognized by the driver.
If the value specified to this method is greater than the maximum length for the property the driver may either truncate the value and generate a warning or generate a SQLClientInfoException. If the driver generates aSQLClientInfoException, the value specified was not set on the connection.
The following are standard client info properties. Drivers are not required to support these properties however if the driver supports a client info property that can be described by one of the standard properties, the standard property name should be used.
•	ApplicationName - The name of the application currently utilizing the connection
•	ClientUser - The name of the user that the application using the connection is performing work for. This may not be the same as the user name that was used in establishing the connection.
•	ClientHostname - The hostname of the computer the application using the connection is running on.
Parameters:
name - The name of the client info property to set
value - The value to set the client info property to. If the value is null, the current value of the specified property is cleared.
Throws:
SQLClientInfoException - if the database server returns an error while setting the client info value on the database server or this method is called on a closed connection
Since:
1.6
•	setClientInfo
•	void setClientInfo(Properties properties)
                   throws SQLClientInfoException
Sets the value of the connection's client info properties. The Properties object contains the names and values of the client info properties to be set. The set of client info properties contained in the properties list replaces the current set of client info properties on the connection. If a property that is currently set on the connection is not present in the properties list, that property is cleared. Specifying an empty properties list will clear all of the properties on the connection. See setClientInfo (String, String) for more information.
If an error occurs in setting any of the client info properties, a SQLClientInfoException is thrown. The SQLClientInfoException contains information indicating which client info properties were not set. The state of the client information is unknown because some databases do not allow multiple client info properties to be set atomically. For those databases, one or more properties may have been set before the error occurred.
Parameters:
properties - the list of client info properties to set
Throws:
SQLClientInfoException - if the database server returns an error while setting the clientInfo values on the database server or this method is called on a closed connection
Since:
1.6
See Also:
setClientInfo(String, String)
•	getClientInfo
•	String getClientInfo(String name)
                     throws SQLException
Returns the value of the client info property specified by name. This method may return null if the specified client info property has not been set and does not have a default value. This method will also return null if the specified client info property name is not supported by the driver.
Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver.
Parameters:
name - The name of the client info property to retrieve
Returns:
The value of the client info property specified
Throws:
SQLException - if the database server returns an error when fetching the client info value from the database or this method is called on a closed connection
Since:
1.6
See Also:
DatabaseMetaData.getClientInfoProperties()
•	getClientInfo
•	Properties getClientInfo()
                         throws SQLException
Returns a list containing the name and current value of each client info property supported by the driver. The value of a client info property may be null if the property has not been set and does not have a default value.
Returns:
A Properties object that contains the name and current value of each of the client info properties supported by the driver.
Throws:
SQLException - if the database server returns an error when fetching the client info values from the database or this method is called on a closed connection
Since:
1.6
•	createArrayOf
•	Array createArrayOf(String typeName,
•	                  Object[] elements)
                    throws SQLException
Factory method for creating Array objects.
Note: When createArrayOf is used to create an array object that maps to a primitive data type, then it is implementation-defined whether the Array object is an array of that primitive data type or an array of Object.
Note: The JDBC driver is responsible for mapping the elements Object array to the default JDBC SQL type defined in java.sql.Types for the given class of Object. The default mapping is specified in Appendix B of the JDBC specification. If the resulting JDBC type is not the appropriate type for the given typeName then it is implementation defined whether an SQLException is thrown or the driver supports the resulting conversion.
Parameters:
typeName - the SQL name of the type the elements of the array map to. The typeName is a database-specific name which may be the name of a built-in type, a user-defined type or a standard SQL type supported by this database. This is the value returned by Array.getBaseTypeName
elements - the elements that populate the returned object
Returns:
an Array object whose elements map to the specified SQL type
Throws:
SQLException - if a database error occurs, the JDBC type is not appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection
SQLFeatureNotSupportedException - if the JDBC driver does not support this data type
Since:
1.6
•	createStruct
•	Struct createStruct(String typeName,
•	                  Object[] attributes)
                    throws SQLException
Factory method for creating Struct objects.
Parameters:
typeName - the SQL type name of the SQL structured type that this Struct object maps to. The typeName is the name of a user-defined type that has been defined for this database. It is the value returned byStruct.getSQLTypeName.
attributes - the attributes that populate the returned object
Returns:
a Struct object that maps to the given SQL type and is populated with the given attributes
Throws:
SQLException - if a database error occurs, the typeName is null or this method is called on a closed connection
SQLFeatureNotSupportedException - if the JDBC driver does not support this data type
Since:
1.6
•	setSchema
•	void setSchema(String schema)
               throws SQLException
Sets the given schema name to access.
If the driver does not support schemas, it will silently ignore this request.
Calling setSchema has no effect on previously created or prepared Statement objects. It is implementation defined whether a DBMS prepare operation takes place immediately when the Connection method prepareStatement orprepareCall is invoked. For maximum portability, setSchema should be called before a Statement is created or prepared.
Parameters:
schema - the name of a schema in which to work
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
Since:
1.7
See Also:
getSchema()
•	getSchema
•	String getSchema()
                 throws SQLException
Retrieves this Connection object's current schema name.
Returns:
the current schema name or null if there is none
Throws:
SQLException - if a database access error occurs or this method is called on a closed connection
Since:
1.7
See Also:
setSchema(java.lang.String)
•	abort
•	void abort(Executor executor)
           throws SQLException
Terminates an open connection. Calling abort results in:
•	The connection marked as closed
•	Closes any physical connection to the database
•	Releases resources used by the connection
•	Insures that any thread that is currently accessing the connection will either progress to completion or throw an SQLException.
Calling abort marks the connection closed and releases any resources. Calling abort on a closed connection is a no-op.
It is possible that the aborting and releasing of the resources that are held by the connection can take an extended period of time. When the abort method returns, the connection will have been marked as closed and the Executorthat was passed as a parameter to abort may still be executing tasks to release resources.
This method checks to see that there is an SQLPermission object before allowing the method to proceed. If a SecurityManager exists and its checkPermission method denies calling abort, this method throws ajava.lang.SecurityException.
Parameters:
executor - The Executor implementation which will be used by abort.
Throws:
SQLException - if a database access error occurs or the executor is null,
SecurityException - if a security manager exists and its checkPermission method denies calling abort
Since:
1.7
See Also:
SecurityManager.checkPermission(java.security.Permission), Executor
•	setNetworkTimeout
•	void setNetworkTimeout(Executor executor,
•	                     int milliseconds)
                       throws SQLException
Sets the maximum period a Connection or objects created from the Connection will wait for the database to reply to any one request. If any request remains unanswered, the waiting method will return with a SQLException, and theConnection or objects created from the Connection will be marked as closed. Any subsequent use of the objects, with the exception of the close, isClosed or Connection.isValid methods, will result in a SQLException.
Note: This method is intended to address a rare but serious condition where network partitions can cause threads issuing JDBC calls to hang uninterruptedly in socket reads, until the OS TCP-TIMEOUT (typically 10 minutes). This method is related to the abort() method which provides an administrator thread a means to free any such threads in cases where the JDBC connection is accessible to the administrator thread. The setNetworkTimeout method will cover cases where there is no administrator thread, or it has no access to the connection. This method is severe in it's effects, and should be given a high enough value so it is never triggered before any more normal timeouts, such as transaction timeouts.
JDBC driver implementations may also choose to support the setNetworkTimeout method to impose a limit on database response time, in environments where no network is present.
Drivers may internally implement some or all of their API calls with multiple internal driver-database transmissions, and it is left to the driver implementation to determine whether the limit will be applied always to the response to the API call, or to any single request made during the API call.
This method can be invoked more than once, such as to set a limit for an area of JDBC code, and to reset to the default on exit from this area. Invocation of this method has no impact on already outstanding requests.
The Statement.setQueryTimeout() timeout value is independent of the timeout value specified in setNetworkTimeout. If the query timeout expires before the network timeout then the statement execution will be canceled. If the network is still active the result will be that both the statement and connection are still usable. However if the network timeout expires before the query timeout or if the statement timeout fails due to network problems, the connection will be marked as closed, any resources held by the connection will be released and both the connection and statement will be unusable.
When the driver determines that the setNetworkTimeout timeout value has expired, the JDBC driver marks the connection closed and releases any resources held by the connection.
This method checks to see that there is an SQLPermission object before allowing the method to proceed. If a SecurityManager exists and its checkPermission method denies calling setNetworkTimeout, this method throws ajava.lang.SecurityException.
Parameters:
executor - The Executor implementation which will be used by setNetworkTimeout.
milliseconds - The time in milliseconds to wait for the database operation to complete. If the JDBC driver does not support milliseconds, the JDBC driver will round the value up to the nearest second. If the timeout period expires before the operation completes, a SQLException will be thrown. A value of 0 indicates that there is not timeout for database operations.
Throws:
SQLException - if a database access error occurs, this method is called on a closed connection, the executor is null, or the value specified for seconds is less than 0.
SecurityException - if a security manager exists and its checkPermission method denies calling setNetworkTimeout.
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.7
See Also:
SecurityManager.checkPermission(java.security.Permission), Statement.setQueryTimeout(int), getNetworkTimeout(), abort(java.util.concurrent.Executor), Executor
•	getNetworkTimeout
•	int getNetworkTimeout()
                      throws SQLException
Retrieves the number of milliseconds the driver will wait for a database request to complete. If the limit is exceeded, a SQLException is thrown.
Returns:
the current timeout limit in milliseconds; zero means there is no limit
Throws:
SQLException - if a database access error occurs or this method is called on a closed Connection
SQLFeatureNotSupportedException - if the JDBC driver does not support this method
Since:
1.7
See Also:
setNetworkTimeout(java.util.concurrent.Executor, int)

